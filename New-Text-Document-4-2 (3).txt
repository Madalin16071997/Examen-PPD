#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <iostream>
#include <vector>
/* --------------------------------------------------------------------
Se dau doua matrici cu N linii ?i 3 coloane ce reprezinta doua multimi
de cate N puncte 3-dimensionale. Implementati un program CUDA ce calculeaza
distanta intre punctele din cele doua matrici.
Parcurgetie pe rand cerintele de mai jos
--------------------------------------------------------------------*/
__global__ void compute_distance(float *a, float *b, float *distante, int N);
int main()
{
    // Numarul N de puncte
    int N = 1000;
    // Matricea ce descrie prima multime de puncte
    float *a_h;
    // Matricea ce descrie a 2-a multime de puncte
    float *b_h;
    // Vectorul ce contine distantele
    float *distante_h;
    /* --------------------------------------------------------------------
    1. Alocati memorie pe host pentru matricile a_h, b_h si vectorul distante_h
    dupa cum urmeaza:
    * Matricile au N linii si 3 coloane si sunt alocate ca un singur bloc de
    memorie (o singura alocare de N*3 elemente)
    * Vectorul ce contine distantele are N elemente
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 1 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    a_h = (float*)malloc(N * 3 * sizeof(float));
    b_h = (float*)malloc(N * 3 * sizeof(float));
    distante_h = (float*)malloc(N * sizeof(float));
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    2. Initializati matricile ce contin punctele dupa cum urmeaza:
    * Pentru prima matrice: Primul punct (adica prima linie din matrice) are
    coordonatele 0,0,0 al 2-lea punct are 1,1,1, al 3-lea 2,2,2, etc.
    * Punctele din a 2-a matrice sunt identice cu punctele din prima matrice
    doar ca se aduna 1 la componenta z a fiecarui punct (adica se aduna
    1 la toate elementele de pe coloana 3)
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 2 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    for (int i = 0; i < N; i++)
    {
        a_h[i * 3] = i;
        a_h[i * 3 + 1] = i;
        a_h[i * 3 + 2] = i;
        b_h[i * 3] = i;
        b_h[i * 3 + 1] = i;
        b_h[i * 3 + 2] = i+1;
    }
    for (int i = 0; i < 10; i++)
    {
        std::cout << a_h[i * 3] << " " << a_h[i * 3 + 1] << " " << a_h[i * 3 + 2] << std::endl;
    }
    for (int i = 0; i < 10; i++)
    {
        std::cout << b_h[i * 3] << " " << b_h[i * 3 + 1] << " " << b_h[i * 3 + 2] << std::endl;
    }
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Matricea si cei doi vectori pentru memoria device
    float *a_d;
    float *b_d;
    float *distante_d;
    /* --------------------------------------------------------------------
    3. Alocati memorie pe device pentru matrici si vectorul ce contine distantele
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 3 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    cudaMalloc((void**)&a_d, N * 3 * sizeof(float));
    cudaMalloc((void**)&b_d, N * 3 * sizeof(float));
    cudaMalloc((void**)&distante_d, N * sizeof(float));
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    4. Copiati continutul celor doua matrici de pe host pe device
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 4 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    cudaMemcpy(a_d, a_h, N * 3 * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(b_d, b_h, N * 3 * sizeof(float), cudaMemcpyHostToDevice);
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Numarul de thread-uri pe bloc
    dim3 threadsPerBlock;
    threadsPerBlock.x = 128;
    threadsPerBlock.y = 1;
    threadsPerBlock.z = 1;
    // Numarul de blocuri
    dim3 numBlocks;
    /* --------------------------------------------------------------------
    5. Calculati numarul de blocuri astfel incat:
    * se obtine un grid 1D de thread-uri
    * Numarul de thread-uri lansate in executie este mai mare sau egal cu N

    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 5 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    numBlocks.x = N / threadsPerBlock.x;
    numBlocks.y = 1;
    numBlocks.z = 1;
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Se lanseaza in executie kernel-ul cuda
    compute_distance << <numBlocks, threadsPerBlock >> > (a_d, b_d, distante_d, N);
    /* --------------------------------------------------------------------
    6. Copiati continutul vectorului ce contine distantele calculate de pe device pe host
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 6 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    cudaMemcpy(distante_h, distante_d, N * sizeof(float), cudaMemcpyDeviceToHost);
    for (int i = 0; i < 10; i++)
    {
        std::cout << distante_h[i] << std::endl;
    }
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    return 0;
}
__global__ void compute_distance(float *a, float *b, float *distances, int N)
{
    // Indicele fiecarui thread
    int index;
    /* --------------------------------------------------------------------
    7. Calculati valoarea indicelui utilizand variabilele predefinite blockDim
    blocIdx si threadIdx astfel incat: thread-ul zero are index 0, thread-ul 1
    are indicele 1, thread-ul 2 are indicele 2, etc.
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 7 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    index = blockDim.x*blockIdx.x + threadIdx.x;
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    8. Calculti distanta intre punctele a_i si b_i (reprezentand linia i din
    matricea a respectiv b) si scrieti rezultatul la pozitia i in vectorul
    ce contine distantele
    2 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 8 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    float ai_x = a[index * 3];
    float ai_y = a[index * 3 + 1];
    float ai_z = a[index * 3 + 2];
    float bi_x = b[index * 3];
    float bi_y = b[index * 3 + 1];
    float bi_z = b[index * 3 + 2];
    distances[index] = sqrt(pow(ai_x - bi_x, 2) + pow(ai_y - bi_y, 2) + pow(ai_z - bi_z, 2));
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
}