#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <iostream>
#include <vector>
/* --------------------------------------------------------------------
Se da o matrice ce contine N puncte 3-dimesionale (deci o matrice cu
N linii si 3 coloane). Implementati un program CUDA ce calculeaza distanta
intre un punct 3-dimensional p0 dat si fiecare din cele N puncte din matrice.
Urmati, pe rand, pasii de mai jos.
--------------------------------------------------------------------*/
__global__ void compute_distance(float *p, float p0_x, float p0_y, float p0_z, float *distante, int N );

int main2()
{
    // Numarul N de puncte
    int N = 1000;
    // Matricea ce contine punctele
    float *p_h;
    // punctul p0
    float p0_x = 0;
    float p0_y = 0;
    float p0_z = 0;
    // Distantele intre p0 si fiecare p_i
    float *distante_h;
    /* --------------------------------------------------------------------
    1. Alocati memorie pe host pentru matricea p_h si vectorul distante_h
    dupa cum urmeaza:
    * Matricea este de N linii si 3 coloane si este alocată ca un singur
    bloc de memorie (o singura alocare de N*3 elemente)
    * Vectorul ce contine distantele are N elemente
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 1 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    p_h = new float[N*3]; // e mai aiurea cu malloc, dar cred ca e corect si cum
		          //ai facut tu
    distante_h = new float[N];
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    2. Initializati matricea ce contine punctele dupa cum urmeaza:
    * Primul punct (adica prima linie din matrice) are coordonatele 0,0,0,
    al 2-lea punct are 1,1,1, al 3-lea 2,2,2, etc
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 2 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    for (int i = 0; i < N ; i++)  // e corect si la tine eu conditia cu j-ul mai mic ca 3
				  //tu ai pus direct	
    {
        for(int j = 0; j < 3; j++){
            p_h[i*3+j] = i;
        }

    }

    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Matricea si cei doi vectori pentru memoria device

    float *p_d;
    float *distante_d;

    /* --------------------------------------------------------------------
    3. Alocati memorie pe device pentru matrice si vectorul ce contine distantele
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 3 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/

    cudaMalloc(&p_d, N*3*sizeof(float)); //e corect si la tine, pointer la pointer = &
    cudaMalloc(&distante_d, N*sizeof(float));

    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    4. Copiati continutul matricei si vectorului b de pe host pe device
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 4 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/

    cudaMemcpy(p_d, p_h, N*3*sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(distante_d, distante_h, N*sizeof(float), cudaMemcpyHostToDevice);

    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Numarul de thread-uri pe bloc
    dim3 threadsPerBlock;
    threadsPerBlock.x = 128;
    threadsPerBlock.y = 1;
    threadsPerBlock.z = 1;
    // Numarul de blocuri
    dim3 numBlocks;
    /* --------------------------------------------------------------------
    5. Calculati numarul de blocuri astfel incat:
    * se obtine un grid 1D de thread-uri
    * Numărul de thread-uri lansate in executie este mai mare sau egal cu N
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 5 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/

    numBlocks.x = (int) ceil(1.0*N/threadsPerBlock.x); // asa e corect ti-am explicat de ce
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    // Se lanseaza in executie kernel-ul cuda
    compute_distance << <numBlocks, threadsPerBlock >> >(p_d, p0_x, p0_y, p0_z, distante_d, N);
    /* --------------------------------------------------------------------
    6. Copiati continutul vectorului ce contine distantele calculate de pe device pe host
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 6 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    cudaMemcpy(distante_h, distante_d, N*sizeof(float),cudaMemcpyDeviceToHost);

    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    return 0;
}
__global__ void compute_distance(float *p, float p0_x, float p0_y, float p0_z, float *distances, int N){
    // Indicele fiecarui thread
    int index;
    /* --------------------------------------------------------------------
    7. Calculati valoarea indicelui utilizand variabilele predefinite blockDim
    blocIdx si threadIdx astfel incat: thread-ul zero are index 0, thread-ul 1
    are indicele 1, thread-ul 2 are indicele 2, etc.
    0.7142 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 7 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    index = blockDim.x*blockIdx.x+threadIdx.x;
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
    /* --------------------------------------------------------------------
    8. Calculti distanta intre punctul p0 si fiecare punct din matricea p
    2 puncte
    ----------------------------------------------------------------------*/
    /* ------------------------ REZOLVARE PCT 8 -----------------------------*/
    /* ------------------------ CODUL TAU DE AICI ---------------------------*/
    if (index < N){  
        distances[index]=sqrt((p[index*3]-p0_x)*(p[index*3]-p0_x)+(p[index*3+1]-p0_y)*(p[index*3+1]-p0_y)+(p[index*3+2]-p0_z)*(p[index*3+2]-p0_z));
    } // e exact ce ai si tu, doar ca trebuie bagat in if pentru ca poate ai 987 de thread-uri cu valori si nu are rost sa te duci pana la 1000 sa ocupi memorie
    /* ------------------------ CODUL TAU PANA AICI ---------------------------*/
}